package com.depromeet.mock.friend;

import com.depromeet.friend.domain.Friend;
import com.depromeet.friend.domain.vo.*;
import com.depromeet.friend.port.out.persistence.FriendPersistencePort;
import com.depromeet.member.domain.Member;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;

public class FakeFriendRepository implements FriendPersistencePort {
    private Long memberAutoGeneratedId = 1L;
    private List<Member> members = new ArrayList<>();
    private Long friendAutoGeneratedId = 1L;
    private List<Friend> friends = new ArrayList<>();

    @Override
    public Friend addFollow(Friend friend) {
        if (friend.getId() == null || friend.getId().equals(0L)) {
            Friend newFriend =
                    Friend.builder()
                            .id(friendAutoGeneratedId++)
                            .member(save(friend.getMember()))
                            .following(save(friend.getFollowing()))
                            .createdAt(LocalDateTime.now())
                            .build();
            friends.add(newFriend);
            return newFriend;
        } else {
            friends.removeIf(item -> item.getId().equals(friend.getId()));
            friends.add(friend);
            return friend;
        }
    }

    public Member save(Member member) {
        if (member.getId() == null || member.getId() == 0) {
            Member newMember =
                    Member.builder()
                            .id(memberAutoGeneratedId)
                            .nickname(member.getNickname() + memberAutoGeneratedId)
                            .email(memberAutoGeneratedId + member.getEmail())
                            .profileImageUrl(memberAutoGeneratedId + member.getProfileImageUrl())
                            .introduction(member.getIntroduction() + memberAutoGeneratedId)
                            .role(member.getRole())
                            .goal(1000)
                            .build();
            members.add(newMember);
            memberAutoGeneratedId++;
            return newMember;
        } else {
            members.removeIf(item -> item.getId().equals(member.getId()));
            members.add(member);
            return member;
        }
    }

    @Override
    public Optional<Friend> findById(Long id) {
        return friends.stream().filter(item -> item.getId().equals(id)).findFirst();
    }

    @Override
    public Optional<Friend> findByMemberIdAndFollowingId(Long memberId, Long followingId) {
        return friends.stream()
                .filter(
                        item ->
                                item.getMember().getId().equals(memberId)
                                        && item.getFollowing().getId().equals(followingId))
                .findFirst();
    }

    @Override
    public void deleteByMemberIdAndFollowingId(Long memberId, Long followingId) {
        friends.removeIf(
                item ->
                        item.getMember().getId().equals(memberId)
                                && item.getFollowing().getId().equals(followingId));
    }

    @Override
    public void deleteFollowerFollowingByMemberIdAndFollowingId(Long memberId, Long followingId) {
        friends.removeIf(
                item ->
                        (item.getMember().getId().equals(memberId)
                                        && item.getFollowing().getId().equals(followingId))
                                || (item.getMember().getId().equals(followingId)
                                        && item.getFollowing().getId().equals(memberId)));
    }

    @Override
    public List<Following> findFollowingsByMemberIdAndCursorId(Long memberId, Long cursorId) {
        return friends.stream()
                .filter(
                        item ->
                                item.getMember().getId().equals(memberId)
                                        && ltCursorId(cursorId, item))
                .sorted(Comparator.comparing(Friend::getId).reversed())
                .limit(11)
                .map(
                        item ->
                                Following.builder()
                                        .friendId(item.getId())
                                        .memberId(item.getFollowing().getId())
                                        .name(item.getFollowing().getNickname())
                                        .profileImageUrl(item.getFollowing().getProfileImageUrl())
                                        .introduction(item.getFollowing().getIntroduction())
                                        .build())
                .toList();
    }

    public boolean ltCursorId(Long cursorId, Friend friend) {
        if (cursorId == null) return true;
        return friend.getId() < cursorId;
    }

    @Override
    public List<Follower> findFollowersByMemberIdAndCursorId(Long memberId, Long cursorId) {
        return friends.stream()
                .filter(
                        item ->
                                item.getFollowing().getId().equals(memberId)
                                        && ltCursorId(cursorId, item))
                .sorted(Comparator.comparing(Friend::getId).reversed())
                .limit(11)
                .map(
                        item ->
                                Follower.builder()
                                        .friendId(item.getId())
                                        .memberId(item.getMember().getId())
                                        .name(item.getMember().getNickname())
                                        .profileImageUrl(item.getMember().getProfileImageUrl())
                                        .introduction(item.getMember().getIntroduction())
                                        .build())
                .toList();
    }

    @Override
    public int countFollowingByMemberId(Long memberId) {
        List<Friend> friendList =
                friends.stream().filter(item -> item.getMember().getId().equals(memberId)).toList();
        return friendList.size();
    }

    @Override
    public int countFollowerByMemberId(Long memberId) {
        List<Friend> friendList =
                friends.stream()
                        .filter(item -> item.getFollowing().getId().equals(memberId))
                        .toList();
        return friendList.size();
    }

    @Override
    public List<Following> findFollowingByMemberIdLimitThree(Long memberId) {
        List<Following> followings =
                friends.stream()
                        .filter(item -> item.getMember().getId().equals(memberId))
                        .map(
                                item ->
                                        Following.builder()
                                                .friendId(item.getId())
                                                .memberId(item.getFollowing().getId())
                                                .name(item.getFollowing().getNickname())
                                                .profileImageUrl(
                                                        item.getFollowing().getProfileImageUrl())
                                                .introduction(item.getFollowing().getIntroduction())
                                                .build())
                        .toList();

        followings = new ArrayList<>(followings);

        followings.sort(
                (follow1, follow2) -> follow2.getFriendId().compareTo(follow1.getFriendId()));

        if (followings.size() > 3) {
            followings = followings.subList(0, 3);
        }
        return followings;
    }

    @Override
    public FriendCount countFriendByMemberId(Long memberId) {
        List<Friend> followings =
                friends.stream().filter(item -> item.getMember().getId().equals(memberId)).toList();
        List<Friend> followers =
                friends.stream()
                        .filter(item -> item.getFollowing().getId().equals(memberId))
                        .toList();

        int followingCnt = followings.size();
        int followerCnt = followers.size();

        return new FriendCount(followerCnt, followingCnt);
    }

    @Override
    public void deleteByMemberId(Long memberId) {
        friends.removeIf(item -> item.getMember().getId().equals(memberId));
        friends.removeIf(item -> item.getFollowing().getId().equals(memberId));
    }

    @Override
    public List<FollowCheck> findByMemberIdAndFollowingIds(Long memberId, List<Long> targetIds) {
        List<Friend> friendList =
                friends.stream().filter(item -> item.getMember().getId().equals(memberId)).toList();
        List<Long> followingIds =
                friendList.stream().map(item -> item.getFollowing().getId()).toList();

        List<FollowCheck> followChecks = new ArrayList<>();
        for (Long targetId : targetIds) {
            FollowCheck followCheck;
            if (followingIds.contains(targetId)) {
                followCheck = new FollowCheck(targetId, true);
            } else {
                followCheck = new FollowCheck(targetId, false);
            }
            followChecks.add(followCheck);
        }
        return followChecks;
    }
}

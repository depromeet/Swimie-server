package com.depromeet.mock.notification;

import com.depromeet.notification.domain.ReactionLog;
import com.depromeet.notification.port.out.ReactionLogPersistencePort;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class FakeReactionLogRepository implements ReactionLogPersistencePort {
    private Long reactionLogAutoGeneratedId = 0L;
    private Map<Long, ReactionLog> reactionLogDatabase = new HashMap<>();

    @Override
    public ReactionLog save(ReactionLog reactionLog) {
        if (reactionLog.getId() == null) {
            ReactionLog newReactionLog =
                    ReactionLog.builder()
                            .id(++reactionLogAutoGeneratedId)
                            .receiver(reactionLog.getReceiver())
                            .reaction(reactionLog.getReaction())
                            .hasRead(reactionLog.isHasRead())
                            .createdAt(LocalDateTime.now())
                            .build();
            reactionLogDatabase.put(reactionLogAutoGeneratedId, newReactionLog);
            return newReactionLog;
        }
        reactionLogDatabase.replace(reactionLog.getId(), reactionLog);
        return reactionLog;
    }

    @Override
    public List<ReactionLog> findByMemberIdAndCursorCreatedAt(
            Long memberId, LocalDateTime cursorCreatedAt) {
        return reactionLogDatabase.values().stream()
                .filter(reactionLog -> reactionLog.getReceiver().getId().equals(memberId))
                .filter(
                        reactionLog ->
                                cursorCreatedAt == null
                                        || reactionLog.getCreatedAt().isBefore(cursorCreatedAt))
                .limit(11)
                .sorted((a, b) -> b.getCreatedAt().compareTo(a.getCreatedAt()))
                .collect(Collectors.toList());
    }

    @Override
    public void updateAllAsRead(Long memberId) {
        reactionLogDatabase.values().stream()
                .filter(reactionLog -> reactionLog.getReceiver().getId().equals(memberId))
                .forEach(ReactionLog::read);
    }

    @Override
    public Long countUnread(Long memberId) {
        return reactionLogDatabase.values().stream()
                .filter(reactionLog -> reactionLog.getReceiver().getId().equals(memberId))
                .filter(reactionLog -> !reactionLog.isHasRead())
                .count();
    }

    @Override
    public void deleteAllByReactionId(List<Long> reactionIds) {
        reactionIds.forEach(reactionLogDatabase.keySet()::remove);
    }
}
